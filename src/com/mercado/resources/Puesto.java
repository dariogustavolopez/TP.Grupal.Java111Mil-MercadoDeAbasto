package com.mercado.resources;
// Generated 01-dic-2018 14:19:46 by Hibernate Tools 4.3.1

import com.mercado.exception.FechaException;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Puesto generated by hbm2java
 */
public class Puesto implements java.io.Serializable {

    private int idPuesto;
    private Estado estado;
    private Integer numero;
    private Set lecturas = new HashSet(0);
    private Set precioAlquileres = new HashSet(0);
    private Set contratos = new HashSet(0);

    public Puesto() {
    }

    public Puesto(int idPuesto, Estado estado) {
        this.idPuesto = idPuesto;
        this.estado = estado;
    }

    public Puesto(int idPuesto, Estado estado, Integer numero, Set lecturas, Set precioalquilers, Set contratos) {
        this.idPuesto = idPuesto;
        this.estado = estado;
        this.numero = numero;
        this.lecturas = lecturas;
        this.precioAlquileres = precioalquilers;
        this.contratos = contratos;
    }

    public int getIdPuesto() {
        return this.idPuesto;
    }

    public void setIdPuesto(int idPuesto) {
        this.idPuesto = idPuesto;
    }

    public Estado getEstado() {
        return this.estado;
    }

    public void setEstado(Estado estado) {
        this.estado = estado;
    }

    public Integer getNumero() {
        return this.numero;
    }

    public void setNumero(Integer numero) {
        this.numero = numero;
    }

    public Set<Lectura> getLecturas() {
        return this.lecturas;
    }

    public void setLecturas(Set lecturas) {
        this.lecturas = lecturas;
    }

    public Set<PrecioAlquiler> getPrecioAlquileres() {
        return this.precioAlquileres;
    }

    public void setPrecioalquilers(Set precioalquilers) {
        this.precioAlquileres = precioalquilers;
    }

    public Set<Contrato> getContratos() {
        return this.contratos;
    }

    public void setContratos(Set contratos) {
        this.contratos = contratos;
    }

    public void alquilar() {
        estado.setAlquilado();
    }

    public void cancelarAlquiler() {
        estado.setDisponible();
    }

    public void darBaja() {
        estado.setNombre("Inhabilitado");
        estado.setDescripcion("Inhabilitado");
    }

    public boolean estaDisponible() {
        return estado.esDisponible();
    }

    public boolean estaDisponibleEnFechas(Date desde, Date hasta) throws FechaException {
        if (hasta.after(desde)) {
            boolean aviso = true;
            for (Contrato c : getContratos()) {
                if (c.getFechaCancelacion() == null) {
                    if (desde.after(c.getFechaInicioContrato()) && desde.before(c.getFechaFinContrato())) {
                        aviso = false;
                    } else if (hasta.after(c.getFechaInicioContrato()) && hasta.before(c.getFechaFinContrato())) {
                        aviso = false;
                    } else if (desde.after(c.getFechaInicioContrato()) && hasta.before(c.getFechaFinContrato())) {
                        aviso = false;
                    }
                } else {
                    if (desde.after(c.getFechaInicioContrato()) && desde.before(c.getFechaCancelacion())) {
                        aviso = false;
                    } else if (hasta.after(c.getFechaInicioContrato()) && hasta.before(c.getFechaCancelacion())) {
                        aviso = false;
                    } else if (desde.after(c.getFechaInicioContrato()) && hasta.before(c.getFechaCancelacion())) {
                        aviso = false;
                    }
                }
            }

            return aviso;
        } else {
            throw new FechaException("Fechas ingresadas incorrectas");
        }
    }

    public void habilitar() {
        estado.setDisponible();
    }

    public void inhabilitar() {
        darBaja();
    }

    @Override
    public String toString() {
        PrecioAlquiler precio = obtenerPrecioVigente();
        if (precio != null) {
            return "Tipo de puesto: " + precio.getTipoPuesto().getNombre()
                    + " | Sector: " + precio.getSector().getNombre()
                    + " | Dimension: " + precio.getDimension().calcularMetrosCuadrados() + " m2"
                    + " | Precio: " + precio.getPrecio();
        } else {
            return "El puesto no tiene un precio vigente.";
        }
    }

    public Date obtenerFechaUltimaLectura() {
        return obtenerUltimaLectura().getFechaCaptura();
    }

    public PrecioAlquiler obtenerPrecioVigente() {
        if (precioAlquileres.isEmpty()) {
            return null;
        } else {
            PrecioAlquiler precio = null;
            for (PrecioAlquiler pa : getPrecioAlquileres()) {
                if (pa.estaVigente()) {
                    precio = pa;
                }
            }
            return precio;
        }
    }
    
    public Lectura obtenerUltimaLectura(){
        Lectura lectura = null;
        boolean bandera = true;
        for (Lectura l : getLecturas()) {
            if(!bandera && l.getFechaCaptura().after(lectura.getFechaCaptura()))
                lectura = l;
            if(bandera){
                lectura = l;
                bandera = false;
            }
        }
        return lectura;
    }
}
